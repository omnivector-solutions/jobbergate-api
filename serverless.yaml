---
service: "jobbergate-api"

plugins:
  - "serverless-wsgi"
  - "serverless-plugin-warmup"
  - "serverless-iam-roles-per-function"
  - "serverless-python-requirements"
  - "serverless-plugin-resource-tagging"
  - "serverless-db-info-plugin"
  - "serverless-single-page-app-plugin"


provider:
  name: "aws"
  runtime: "python3.6"

  region: "${opt:region, 'us-west-2'}"
  stage: "${opt:stage, 'staging'}"

  stackTags:
    Application: "${self:service}-${self:provider.stage}"

  environment: "${file(./include/env.yaml)}"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ses:*
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:service}-${self:provider.stage}-${self:provider.region}-resources/*"

package:
  exclude:
    - node_modules/**
    - '!node_modules/node-fetch/**'
    - .serverless/**
    - .tox/**
    - .git/**
    - '*.swp'
    - .gitignore
    - env/**
    - venv/**
    - testenv/**
    - static/**
    - media/**

custom:
  wsgi:
    app: jobbergate_api.wsgi.application
  warmup:
    enabled: true
  pythonRequirements:
    slim: true
    zip: true
    dockerizePip: true
    layer: true
    pythonBin: "python3"
    fileName: "requirements/requirements.txt"

  s3Bucket: "${self:service}-${self:provider.stage}-${self:provider.region}-assets"
  s3ResourcesBucket: "${self:service}-${self:provider.stage}-${self:provider.region}-resources"
  s3LocalPath: "static/"

  vpc: ${file(./include/${self:provider.region}/vpc.js)}


functions:
  api:
    handler: wsgi_handler.handler
    package: {}  # workaround for https://github.com/UnitedIncome/serverless-python-requirements/issues/414
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

    memorySize: 512
    timeout: 60
    vpc:
      vpcId: "${self:custom.vpc.vpcId}"
      securityGroupIds: ${self:custom.vpc.internal.securityGroupIds}
      subnetIds: ${self:custom.vpc.internal.subnetIds}


resources:
  Resources:
    APILoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${self:service}-${self:provider.stage}-alb
        SecurityGroups:
          ${self:custom.vpc.alb.securityGroupIds}
        Scheme: ${self:custom.vpc.alb.albScheme}
        Subnets:  # IGW subnets for production, else security partner VPN
          ${self:custom.vpc.alb.subnetIds}

    APIHTTPListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref APILoadBalancer
        Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: 443
              StatusCode: HTTP_301

    APIHTTPSListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref APILoadBalancer
        Protocol: HTTPS
        Port: 443
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref APITargetGroup
        Certificates:
          - CertificateArn: !Ref APIHTTPSCert

    APIRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: omnivector.solutions.
        # NOTE: The production jobbergate-api.omnivector.solutions record is manually managed
        Name: jobbergate-api-${self:provider.stage}-${self:provider.region}.omnivector.solutions
        Type: A
        AliasTarget:
          DNSName: !GetAtt APILoadBalancer.DNSName
          HostedZoneId: !GetAtt APILoadBalancer.CanonicalHostedZoneID

    # NOTE: For new certicates a manual verification step may be necessary to
    # verify domain ownership. More info:
    # https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html
    APIHTTPSCert:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: !Ref APIRecordSet
        ValidationMethod: DNS
        SubjectAlternativeNames:
          - jobbergate-api-${self:provider.stage}-${self:provider.region}.omnivector.solutions

    APITargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${self:service}-${self:provider.stage}-tg
        TargetType: lambda
        Targets:
          - Id: !GetAtt ApiLambdaFunction.Arn
        TargetGroupAttributes:
          - Key: lambda.multi_value_headers.enabled
            Value: true
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 300
        HealthCheckPath: /healthcheck/

    APIInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ApiLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: elasticloadbalancing.amazonaws.com

    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead

    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AssetsBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    ResourcesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3ResourcesBucket}

    ResourcesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ResourcesBucket
        PolicyDocument:
          Statement:
            - Sid: PutGetObject
              Effect: Allow
              Principal:
                AWS: "arn:aws:iam::212021838531:role/jobbergate-api-${self:provider.stage}-${self:provider.region}-lambdaRole"
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3ResourcesBucket}/*

    AssetsDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: Assets
              DomainName: ${self:custom.s3Bucket}.s3.${self:provider.region}.amazonaws.com
              S3OriginConfig: {}
          DefaultCacheBehavior:
            TargetOriginId: Assets
            DefaultTTL: 86400
            MaxTTL: 31536000
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Headers: ['Origin']
          Enabled: true

    AuroraClusterSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupName: aurora-${self:service}-${self:provider.stage}-dbsg
        DBSubnetGroupDescription: Aurora SubnetGroup
        SubnetIds:
          ${self:custom.vpc.internal.subnetIds}

    AuroraClusterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Allow ingress from our vpc subnet cidrs on 5432."
        VpcId: ${self:custom.vpc.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: ${self:custom.vpc.auroraClusterCidrIp}

    AuroraInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: postgres
        AllocatedStorage: 40

        DBInstanceClass: db.t3.small
        DBSubnetGroupName: !Ref AuroraClusterSubnetGroup

        DBName: ${self:provider.environment.DATABASE_NAME}
        MasterUsername: ${self:provider.environment.DATABASE_USER}
        MasterUserPassword: ${self:provider.environment.DATABASE_PASS}

        VPCSecurityGroups:
          - !GetAtt AuroraClusterSecurityGroup.GroupId

        BackupRetentionPeriod: 35
        PubliclyAccessible: "false"

  Outputs:
    dbUri:
      Value: ${self:provider.environment.DATABASE_URI}

    dbHost:
      Value: ${self:provider.environment.DATABASE_HOST}

    dbPort:
      Value: ${self:provider.environment.DATABASE_PORT}

    dbPass:
      Value: ${self:provider.environment.DATABASE_PASS}

    dbUser:
      Value: ${self:provider.environment.DATABASE_USER}

    dbName:
      Value: ${self:provider.environment.DATABASE_NAME}

    assetsBucket:
      Value:
        'Ref': AssetsBucket

    assetsBucketUrl:
      Value:
        'Fn::GetAtt': [ AssetsBucket, WebsiteURL ]

    assetsDistribution:
      Value:
        'Fn::GetAtt': [ AssetsDistribution, DomainName ]
